using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StopwatchModel {
    [RealtimeProperty(1, true)] private double _startTime;
    [RealtimeProperty(3, true)] private float _animatorTime;
    [RealtimeProperty(2, true)] private bool _firstPlayer;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StopwatchModel : RealtimeModel {
    public double startTime {
        get {
            return _cache.LookForValueInCache(_startTime, entry => entry.startTimeSet, entry => entry.startTime);
        }
        set {
            if (this.startTime == value) return;
            _cache.UpdateLocalCache(entry => { entry.startTimeSet = true; entry.startTime = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public float animatorTime {
        get {
            return _cache.LookForValueInCache(_animatorTime, entry => entry.animatorTimeSet, entry => entry.animatorTime);
        }
        set {
            if (this.animatorTime == value) return;
            _cache.UpdateLocalCache(entry => { entry.animatorTimeSet = true; entry.animatorTime = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public bool firstPlayer {
        get {
            return _cache.LookForValueInCache(_firstPlayer, entry => entry.firstPlayerSet, entry => entry.firstPlayer);
        }
        set {
            if (this.firstPlayer == value) return;
            _cache.UpdateLocalCache(entry => { entry.firstPlayerSet = true; entry.firstPlayer = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    private struct LocalCacheEntry {
        public bool startTimeSet;
        public double startTime;
        public bool animatorTimeSet;
        public float animatorTime;
        public bool firstPlayerSet;
        public bool firstPlayer;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        StartTime = 1,
        AnimatorTime = 3,
        FirstPlayer = 2,
    }
    
    public StopwatchModel() : this(null) {
    }
    
    public StopwatchModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteDoubleLength((uint)PropertyID.StartTime);
            length += WriteStream.WriteFloatLength((uint)PropertyID.AnimatorTime);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.FirstPlayer, _firstPlayer ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.startTimeSet) {
                length += WriteStream.WriteDoubleLength((uint)PropertyID.StartTime);
            }
            if (entry.animatorTimeSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.AnimatorTime);
            }
            if (entry.firstPlayerSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.FirstPlayer, entry.firstPlayer ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteDouble((uint)PropertyID.StartTime, _startTime);
            stream.WriteFloat((uint)PropertyID.AnimatorTime, _animatorTime);
            stream.WriteVarint32((uint)PropertyID.FirstPlayer, _firstPlayer ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.startTimeSet || entry.animatorTimeSet || entry.firstPlayerSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.startTimeSet) {
                stream.WriteDouble((uint)PropertyID.StartTime, entry.startTime);
                didWriteProperties = true;
            }
            if (entry.animatorTimeSet) {
                stream.WriteFloat((uint)PropertyID.AnimatorTime, entry.animatorTime);
                didWriteProperties = true;
            }
            if (entry.firstPlayerSet) {
                stream.WriteVarint32((uint)PropertyID.FirstPlayer, entry.firstPlayer ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.StartTime: {
                    _startTime = stream.ReadDouble();
                    break;
                }
                case (uint)PropertyID.AnimatorTime: {
                    _animatorTime = stream.ReadFloat();
                    break;
                }
                case (uint)PropertyID.FirstPlayer: {
                    _firstPlayer = (stream.ReadVarint32() != 0);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _startTime = startTime;
        _animatorTime = animatorTime;
        _firstPlayer = firstPlayer;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
