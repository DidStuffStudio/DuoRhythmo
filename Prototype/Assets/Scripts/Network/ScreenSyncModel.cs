
using System;
using Normal.Realtime.Serialization;
using UnityEngine;
using Normal.Realtime;

[RealtimeModel]
public partial class ScreenSyncModel {
    // rhythm (beats)
    [RealtimeProperty(1, true, true)] private int _indexValue;
    [RealtimeProperty(2, true, true)] private int _numberOfNodes;
    [RealtimeProperty(3, true, true)] private int _bpm;
    
    // effects
    [RealtimeProperty(4, true, true)] private int _effect1;
    [RealtimeProperty(5, true, true)] private int _effect2;
    [RealtimeProperty(6, true, true)] private int _effect3;
    [RealtimeProperty(7, true, true)] private int _effect4;
}



/* ----- Begin Normal Autogenerated Code ----- */
public partial class ScreenSyncModel : RealtimeModel {
    public int indexValue {
        get {
            return _indexValueProperty.value;
        }
        set {
            if (_indexValueProperty.value == value) return;
            _indexValueProperty.value = value;
            InvalidateReliableLength();
            FireIndexValueDidChange(value);
        }
    }
    
    public int numberOfNodes {
        get {
            return _numberOfNodesProperty.value;
        }
        set {
            if (_numberOfNodesProperty.value == value) return;
            _numberOfNodesProperty.value = value;
            InvalidateReliableLength();
            FireNumberOfNodesDidChange(value);
        }
    }
    
    public int bpm {
        get {
            return _bpmProperty.value;
        }
        set {
            if (_bpmProperty.value == value) return;
            _bpmProperty.value = value;
            InvalidateReliableLength();
            FireBpmDidChange(value);
        }
    }
    
    public int effect1 {
        get {
            return _effect1Property.value;
        }
        set {
            if (_effect1Property.value == value) return;
            _effect1Property.value = value;
            InvalidateReliableLength();
            FireEffect1DidChange(value);
        }
    }
    
    public int effect2 {
        get {
            return _effect2Property.value;
        }
        set {
            if (_effect2Property.value == value) return;
            _effect2Property.value = value;
            InvalidateReliableLength();
            FireEffect2DidChange(value);
        }
    }
    
    public int effect3 {
        get {
            return _effect3Property.value;
        }
        set {
            if (_effect3Property.value == value) return;
            _effect3Property.value = value;
            InvalidateReliableLength();
            FireEffect3DidChange(value);
        }
    }
    
    public int effect4 {
        get {
            return _effect4Property.value;
        }
        set {
            if (_effect4Property.value == value) return;
            _effect4Property.value = value;
            InvalidateReliableLength();
            FireEffect4DidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ScreenSyncModel model, T value);
    public event PropertyChangedHandler<int> indexValueDidChange;
    public event PropertyChangedHandler<int> numberOfNodesDidChange;
    public event PropertyChangedHandler<int> bpmDidChange;
    public event PropertyChangedHandler<int> effect1DidChange;
    public event PropertyChangedHandler<int> effect2DidChange;
    public event PropertyChangedHandler<int> effect3DidChange;
    public event PropertyChangedHandler<int> effect4DidChange;
    
    public enum PropertyID : uint {
        IndexValue = 1,
        NumberOfNodes = 2,
        Bpm = 3,
        Effect1 = 4,
        Effect2 = 5,
        Effect3 = 6,
        Effect4 = 7,
    }
    
    #region Properties
    
    private ReliableProperty<int> _indexValueProperty;
    
    private ReliableProperty<int> _numberOfNodesProperty;
    
    private ReliableProperty<int> _bpmProperty;
    
    private ReliableProperty<int> _effect1Property;
    
    private ReliableProperty<int> _effect2Property;
    
    private ReliableProperty<int> _effect3Property;
    
    private ReliableProperty<int> _effect4Property;
    
    #endregion
    
    public ScreenSyncModel() : base(null) {
        _indexValueProperty = new ReliableProperty<int>(1, _indexValue);
        _numberOfNodesProperty = new ReliableProperty<int>(2, _numberOfNodes);
        _bpmProperty = new ReliableProperty<int>(3, _bpm);
        _effect1Property = new ReliableProperty<int>(4, _effect1);
        _effect2Property = new ReliableProperty<int>(5, _effect2);
        _effect3Property = new ReliableProperty<int>(6, _effect3);
        _effect4Property = new ReliableProperty<int>(7, _effect4);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _indexValueProperty.UnsubscribeCallback();
        _numberOfNodesProperty.UnsubscribeCallback();
        _bpmProperty.UnsubscribeCallback();
        _effect1Property.UnsubscribeCallback();
        _effect2Property.UnsubscribeCallback();
        _effect3Property.UnsubscribeCallback();
        _effect4Property.UnsubscribeCallback();
    }
    
    private void FireIndexValueDidChange(int value) {
        try {
            indexValueDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNumberOfNodesDidChange(int value) {
        try {
            numberOfNodesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBpmDidChange(int value) {
        try {
            bpmDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEffect1DidChange(int value) {
        try {
            effect1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEffect2DidChange(int value) {
        try {
            effect2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEffect3DidChange(int value) {
        try {
            effect3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEffect4DidChange(int value) {
        try {
            effect4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _indexValueProperty.WriteLength(context);
        length += _numberOfNodesProperty.WriteLength(context);
        length += _bpmProperty.WriteLength(context);
        length += _effect1Property.WriteLength(context);
        length += _effect2Property.WriteLength(context);
        length += _effect3Property.WriteLength(context);
        length += _effect4Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _indexValueProperty.Write(stream, context);
        writes |= _numberOfNodesProperty.Write(stream, context);
        writes |= _bpmProperty.Write(stream, context);
        writes |= _effect1Property.Write(stream, context);
        writes |= _effect2Property.Write(stream, context);
        writes |= _effect3Property.Write(stream, context);
        writes |= _effect4Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IndexValue: {
                    changed = _indexValueProperty.Read(stream, context);
                    if (changed) FireIndexValueDidChange(indexValue);
                    break;
                }
                case (uint) PropertyID.NumberOfNodes: {
                    changed = _numberOfNodesProperty.Read(stream, context);
                    if (changed) FireNumberOfNodesDidChange(numberOfNodes);
                    break;
                }
                case (uint) PropertyID.Bpm: {
                    changed = _bpmProperty.Read(stream, context);
                    if (changed) FireBpmDidChange(bpm);
                    break;
                }
                case (uint) PropertyID.Effect1: {
                    changed = _effect1Property.Read(stream, context);
                    if (changed) FireEffect1DidChange(effect1);
                    break;
                }
                case (uint) PropertyID.Effect2: {
                    changed = _effect2Property.Read(stream, context);
                    if (changed) FireEffect2DidChange(effect2);
                    break;
                }
                case (uint) PropertyID.Effect3: {
                    changed = _effect3Property.Read(stream, context);
                    if (changed) FireEffect3DidChange(effect3);
                    break;
                }
                case (uint) PropertyID.Effect4: {
                    changed = _effect4Property.Read(stream, context);
                    if (changed) FireEffect4DidChange(effect4);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _indexValue = indexValue;
        _numberOfNodes = numberOfNodes;
        _bpm = bpm;
        _effect1 = effect1;
        _effect2 = effect2;
        _effect3 = effect3;
        _effect4 = effect4;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
