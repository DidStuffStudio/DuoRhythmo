using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StringModel {
    [RealtimeProperty(1, true, true)] private string _message;
    [RealtimeProperty(2, true, true)] private string _setPlayerNumber;
    [RealtimeProperty(3, true, true)] private string _newPlayerConnected;
    [RealtimeProperty(4, true, true)] private string _drumNodesSingle;
    [RealtimeProperty(5, true, true)] private string _drumNodesALL;
    [RealtimeProperty(6, true, true)] private string _effectsValues;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StringModel : RealtimeModel {
    public string message {
        get {
            return _messageProperty.value;
        }
        set {
            if (_messageProperty.value == value) return;
            _messageProperty.value = value;
            InvalidateReliableLength();
            FireMessageDidChange(value);
        }
    }
    
    public string setPlayerNumber {
        get {
            return _setPlayerNumberProperty.value;
        }
        set {
            if (_setPlayerNumberProperty.value == value) return;
            _setPlayerNumberProperty.value = value;
            InvalidateReliableLength();
            FireSetPlayerNumberDidChange(value);
        }
    }
    
    public string newPlayerConnected {
        get {
            return _newPlayerConnectedProperty.value;
        }
        set {
            if (_newPlayerConnectedProperty.value == value) return;
            _newPlayerConnectedProperty.value = value;
            InvalidateReliableLength();
            FireNewPlayerConnectedDidChange(value);
        }
    }
    
    public string drumNodesSingle {
        get {
            return _drumNodesSingleProperty.value;
        }
        set {
            if (_drumNodesSingleProperty.value == value) return;
            _drumNodesSingleProperty.value = value;
            InvalidateReliableLength();
            FireDrumNodesSingleDidChange(value);
        }
    }
    
    public string drumNodesALL {
        get {
            return _drumNodesALLProperty.value;
        }
        set {
            if (_drumNodesALLProperty.value == value) return;
            _drumNodesALLProperty.value = value;
            InvalidateReliableLength();
            FireDrumNodesALLDidChange(value);
        }
    }
    
    public string effectsValues {
        get {
            return _effectsValuesProperty.value;
        }
        set {
            if (_effectsValuesProperty.value == value) return;
            _effectsValuesProperty.value = value;
            InvalidateReliableLength();
            FireEffectsValuesDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(StringModel model, T value);
    public event PropertyChangedHandler<string> messageDidChange;
    public event PropertyChangedHandler<string> setPlayerNumberDidChange;
    public event PropertyChangedHandler<string> newPlayerConnectedDidChange;
    public event PropertyChangedHandler<string> drumNodesSingleDidChange;
    public event PropertyChangedHandler<string> drumNodesALLDidChange;
    public event PropertyChangedHandler<string> effectsValuesDidChange;
    
    public enum PropertyID : uint {
        Message = 1,
        SetPlayerNumber = 2,
        NewPlayerConnected = 3,
        DrumNodesSingle = 4,
        DrumNodesALL = 5,
        EffectsValues = 6,
    }
    
    #region Properties
    
    private ReliableProperty<string> _messageProperty;
    
    private ReliableProperty<string> _setPlayerNumberProperty;
    
    private ReliableProperty<string> _newPlayerConnectedProperty;
    
    private ReliableProperty<string> _drumNodesSingleProperty;
    
    private ReliableProperty<string> _drumNodesALLProperty;
    
    private ReliableProperty<string> _effectsValuesProperty;
    
    #endregion
    
    public StringModel() : base(null) {
        _messageProperty = new ReliableProperty<string>(1, _message);
        _setPlayerNumberProperty = new ReliableProperty<string>(2, _setPlayerNumber);
        _newPlayerConnectedProperty = new ReliableProperty<string>(3, _newPlayerConnected);
        _drumNodesSingleProperty = new ReliableProperty<string>(4, _drumNodesSingle);
        _drumNodesALLProperty = new ReliableProperty<string>(5, _drumNodesALL);
        _effectsValuesProperty = new ReliableProperty<string>(6, _effectsValues);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _messageProperty.UnsubscribeCallback();
        _setPlayerNumberProperty.UnsubscribeCallback();
        _newPlayerConnectedProperty.UnsubscribeCallback();
        _drumNodesSingleProperty.UnsubscribeCallback();
        _drumNodesALLProperty.UnsubscribeCallback();
        _effectsValuesProperty.UnsubscribeCallback();
    }
    
    private void FireMessageDidChange(string value) {
        try {
            messageDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSetPlayerNumberDidChange(string value) {
        try {
            setPlayerNumberDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNewPlayerConnectedDidChange(string value) {
        try {
            newPlayerConnectedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDrumNodesSingleDidChange(string value) {
        try {
            drumNodesSingleDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDrumNodesALLDidChange(string value) {
        try {
            drumNodesALLDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireEffectsValuesDidChange(string value) {
        try {
            effectsValuesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _messageProperty.WriteLength(context);
        length += _setPlayerNumberProperty.WriteLength(context);
        length += _newPlayerConnectedProperty.WriteLength(context);
        length += _drumNodesSingleProperty.WriteLength(context);
        length += _drumNodesALLProperty.WriteLength(context);
        length += _effectsValuesProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _messageProperty.Write(stream, context);
        writes |= _setPlayerNumberProperty.Write(stream, context);
        writes |= _newPlayerConnectedProperty.Write(stream, context);
        writes |= _drumNodesSingleProperty.Write(stream, context);
        writes |= _drumNodesALLProperty.Write(stream, context);
        writes |= _effectsValuesProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Message: {
                    changed = _messageProperty.Read(stream, context);
                    if (changed) FireMessageDidChange(message);
                    break;
                }
                case (uint) PropertyID.SetPlayerNumber: {
                    changed = _setPlayerNumberProperty.Read(stream, context);
                    if (changed) FireSetPlayerNumberDidChange(setPlayerNumber);
                    break;
                }
                case (uint) PropertyID.NewPlayerConnected: {
                    changed = _newPlayerConnectedProperty.Read(stream, context);
                    if (changed) FireNewPlayerConnectedDidChange(newPlayerConnected);
                    break;
                }
                case (uint) PropertyID.DrumNodesSingle: {
                    changed = _drumNodesSingleProperty.Read(stream, context);
                    if (changed) FireDrumNodesSingleDidChange(drumNodesSingle);
                    break;
                }
                case (uint) PropertyID.DrumNodesALL: {
                    changed = _drumNodesALLProperty.Read(stream, context);
                    if (changed) FireDrumNodesALLDidChange(drumNodesALL);
                    break;
                }
                case (uint) PropertyID.EffectsValues: {
                    changed = _effectsValuesProperty.Read(stream, context);
                    if (changed) FireEffectsValuesDidChange(effectsValues);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _message = message;
        _setPlayerNumber = setPlayerNumber;
        _newPlayerConnected = newPlayerConnected;
        _drumNodesSingle = drumNodesSingle;
        _drumNodesALL = drumNodesALL;
        _effectsValues = effectsValues;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
