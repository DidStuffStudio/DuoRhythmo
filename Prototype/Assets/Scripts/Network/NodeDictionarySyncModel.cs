using System.Collections;
using System.Collections.Generic;
using Network;
using Normal.Realtime.Serialization;
using UnityEngine;
using Normal.Realtime;

[RealtimeModel]
public partial class NodeDictionarySyncModel {
    [RealtimeProperty(1, true, true)] private RealtimeDictionary<NodeModel> _kickNodeDictionary;
    [RealtimeProperty(2, true, true)] private RealtimeDictionary<NodeModel> _snareNodeDictionary;
    [RealtimeProperty(3, true, true)] private RealtimeDictionary<NodeModel> _hihatNodeDictionary;
    [RealtimeProperty(4, true, true)] private RealtimeDictionary<NodeModel> _tomNodeDictionary;
    [RealtimeProperty(5, true, true)] private RealtimeDictionary<NodeModel> _cymbalNodeDictionary;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NodeDictionarySyncModel : RealtimeModel {
    public Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel> kickNodeDictionary {
        get => _kickNodeDictionary;
    }
    
    public Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel> snareNodeDictionary {
        get => _snareNodeDictionary;
    }
    
    public Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel> hihatNodeDictionary {
        get => _hihatNodeDictionary;
    }
    
    public Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel> tomNodeDictionary {
        get => _tomNodeDictionary;
    }
    
    public Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel> cymbalNodeDictionary {
        get => _cymbalNodeDictionary;
    }
    
    public enum PropertyID : uint {
        KickNodeDictionary = 1,
        SnareNodeDictionary = 2,
        HihatNodeDictionary = 3,
        TomNodeDictionary = 4,
        CymbalNodeDictionary = 5,
    }
    
    #region Properties
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>> _kickNodeDictionaryProperty;
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>> _snareNodeDictionaryProperty;
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>> _hihatNodeDictionaryProperty;
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>> _tomNodeDictionaryProperty;
    
    private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>> _cymbalNodeDictionaryProperty;
    
    #endregion
    
    public NodeDictionarySyncModel() : base(null) {
        RealtimeModel[] childModels = new RealtimeModel[5];
        
        _kickNodeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>();
        childModels[0] = _kickNodeDictionary;
        
        _snareNodeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>();
        childModels[1] = _snareNodeDictionary;
        
        _hihatNodeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>();
        childModels[2] = _hihatNodeDictionary;
        
        _tomNodeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>();
        childModels[3] = _tomNodeDictionary;
        
        _cymbalNodeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>();
        childModels[4] = _cymbalNodeDictionary;
        
        SetChildren(childModels);
        
        _kickNodeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>>(1, _kickNodeDictionary);
        _snareNodeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>>(2, _snareNodeDictionary);
        _hihatNodeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>>(3, _hihatNodeDictionary);
        _tomNodeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>>(4, _tomNodeDictionary);
        _cymbalNodeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<Network.NodeModel>>(5, _cymbalNodeDictionary);
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _kickNodeDictionaryProperty.WriteLength(context);
        length += _snareNodeDictionaryProperty.WriteLength(context);
        length += _hihatNodeDictionaryProperty.WriteLength(context);
        length += _tomNodeDictionaryProperty.WriteLength(context);
        length += _cymbalNodeDictionaryProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _kickNodeDictionaryProperty.Write(stream, context);
        writes |= _snareNodeDictionaryProperty.Write(stream, context);
        writes |= _hihatNodeDictionaryProperty.Write(stream, context);
        writes |= _tomNodeDictionaryProperty.Write(stream, context);
        writes |= _cymbalNodeDictionaryProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.KickNodeDictionary: {
                    changed = _kickNodeDictionaryProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.SnareNodeDictionary: {
                    changed = _snareNodeDictionaryProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.HihatNodeDictionary: {
                    changed = _hihatNodeDictionaryProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.TomNodeDictionary: {
                    changed = _tomNodeDictionaryProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.CymbalNodeDictionary: {
                    changed = _cymbalNodeDictionaryProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _kickNodeDictionary = kickNodeDictionary;
        _snareNodeDictionary = snareNodeDictionary;
        _hihatNodeDictionary = hihatNodeDictionary;
        _tomNodeDictionary = tomNodeDictionary;
        _cymbalNodeDictionary = cymbalNodeDictionary;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
