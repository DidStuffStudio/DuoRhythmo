using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StringModel {
    [RealtimeProperty(1, true, true)] private string _message;
    [RealtimeProperty(2, true, true)] private string _setPlayerNumber;
    [RealtimeProperty(3, true, true)] private string _newPlayerConnected;
    [RealtimeProperty(4, true, true)] private string _drumNodesSingle;
    [RealtimeProperty(5, true, true)] private string _drumNodesALL;
    [RealtimeProperty(6, true, true)] private string _effectsValues;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StringModel : RealtimeModel {
    public string message {
        get {
            return _cache.LookForValueInCache(_message, entry => entry.messageSet, entry => entry.message);
        }
        set {
            if (this.message == value) return;
            _cache.UpdateLocalCache(entry => { entry.messageSet = true; entry.message = value; return entry; });
            InvalidateReliableLength();
            FireMessageDidChange(value);
        }
    }
    
    public string setPlayerNumber {
        get {
            return _cache.LookForValueInCache(_setPlayerNumber, entry => entry.setPlayerNumberSet, entry => entry.setPlayerNumber);
        }
        set {
            if (this.setPlayerNumber == value) return;
            _cache.UpdateLocalCache(entry => { entry.setPlayerNumberSet = true; entry.setPlayerNumber = value; return entry; });
            InvalidateReliableLength();
            FireSetPlayerNumberDidChange(value);
        }
    }

    public string newPlayerConnected {
        get {
            return _cache.LookForValueInCache(_newPlayerConnected, entry => entry.newPlayerConnectedSet, entry => entry.newPlayerConnected);
        }
        set {
            if (this.newPlayerConnected == value) return;
            _cache.UpdateLocalCache(entry => { entry.newPlayerConnectedSet = true; entry.newPlayerConnected = value; return entry; });
            InvalidateReliableLength();
            FireNewPlayerConnectedDidChange(value);
        }
    }

    public string drumNodesSingle {
        get {
            return _cache.LookForValueInCache(_drumNodesSingle, entry => entry.drumNodesSingleSet, entry => entry.drumNodesSingle);
        }
        set {
            if (this.drumNodesSingle == value) return;
            _cache.UpdateLocalCache(entry => { entry.drumNodesSingleSet = true; entry.drumNodesSingle = value; return entry; });
            InvalidateReliableLength();
            FireDrumNodesSingleDidChange(value);
        }
    }
    
    public string drumNodesALL {
        get {
            return _cache.LookForValueInCache(_drumNodesALL, entry => entry.drumNodesALLSet, entry => entry.drumNodesALL);
        }
        set {
            if (this.drumNodesALL == value) return;
            _cache.UpdateLocalCache(entry => { entry.drumNodesALLSet = true; entry.drumNodesALL = value; return entry; });
            InvalidateReliableLength();
            FireDrumNodesALLDidChange(value);
        }
    }

    public string effectsValues {
        get {
            return _cache.LookForValueInCache(_effectsValues, entry => entry.effectsValuesSet, entry => entry.effectsValues);
        }
        set {
            if (this.effectsValues == value) return;
            _cache.UpdateLocalCache(entry => { entry.effectsValuesSet = true; entry.effectsValues = value; return entry; });
            InvalidateReliableLength();
            FireEffectsValuesDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(StringModel model, T value);
    public event PropertyChangedHandler<string> messageDidChange;
    public event PropertyChangedHandler<string> setPlayerNumberDidChange;
    public event PropertyChangedHandler<string> newPlayerConnectedDidChange;
    public event PropertyChangedHandler<string> drumNodesSingleDidChange;
    public event PropertyChangedHandler<string> drumNodesALLDidChange;
    public event PropertyChangedHandler<string> effectsValuesDidChange;
    
    private struct LocalCacheEntry {
        public bool messageSet;
        public string message;
        public bool setPlayerNumberSet;
        public string setPlayerNumber;
        public bool timerSet;
        public string timer;
        public bool newPlayerConnectedSet;
        public string newPlayerConnected;
        public bool newPlayerUpdateTimeSet;
        public string newPlayerUpdateTime;
        public bool drumNodesSingleSet;
        public string drumNodesSingle;
        public bool drumNodesALLSet;
        public string drumNodesALL;
        public bool animatorTimeSet;
        public string animatorTime;
        public bool effectsValuesSet;
        public string effectsValues;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Message = 1,
        SetPlayerNumber = 2,
        Timer = 3,
        NewPlayerConnected = 4,
        NewPlayerUpdateTime = 5,
        DrumNodesSingle = 6,
        DrumNodesALL = 7,
        AnimatorTime = 8,
        EffectsValues = 9,
    }
    
    public StringModel() : this(null) {
    }
    
    public StringModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireMessageDidChange(string value) {
        try {
            messageDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireSetPlayerNumberDidChange(string value) {
        try {
            setPlayerNumberDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    
    private void FireNewPlayerConnectedDidChange(string value) {
        try {
            newPlayerConnectedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDrumNodesSingleDidChange(string value) {
        try {
            drumNodesSingleDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDrumNodesALLDidChange(string value) {
        try {
            drumNodesALLDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    
    private void FireEffectsValuesDidChange(string value) {
        try {
            effectsValuesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteStringLength((uint)PropertyID.Message, _message);
            length += WriteStream.WriteStringLength((uint)PropertyID.SetPlayerNumber, _setPlayerNumber);
            length += WriteStream.WriteStringLength((uint)PropertyID.NewPlayerConnected, _newPlayerConnected);
            length += WriteStream.WriteStringLength((uint)PropertyID.DrumNodesSingle, _drumNodesSingle);
            length += WriteStream.WriteStringLength((uint)PropertyID.DrumNodesALL, _drumNodesALL);
            length += WriteStream.WriteStringLength((uint)PropertyID.EffectsValues, _effectsValues);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.messageSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.Message, entry.message);
            }
            if (entry.setPlayerNumberSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.SetPlayerNumber, entry.setPlayerNumber);
            }
            if (entry.timerSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.Timer, entry.timer);
            }
            if (entry.newPlayerConnectedSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.NewPlayerConnected, entry.newPlayerConnected);
            }
            if (entry.newPlayerUpdateTimeSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.NewPlayerUpdateTime, entry.newPlayerUpdateTime);
            }
            if (entry.drumNodesSingleSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.DrumNodesSingle, entry.drumNodesSingle);
            }
            if (entry.drumNodesALLSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.DrumNodesALL, entry.drumNodesALL);
            }
            if (entry.animatorTimeSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.AnimatorTime, entry.animatorTime);
            }
            if (entry.effectsValuesSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.EffectsValues, entry.effectsValues);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteString((uint)PropertyID.Message, _message);
            stream.WriteString((uint)PropertyID.SetPlayerNumber, _setPlayerNumber);
            stream.WriteString((uint)PropertyID.NewPlayerConnected, _newPlayerConnected);
            stream.WriteString((uint)PropertyID.DrumNodesSingle, _drumNodesSingle);
            stream.WriteString((uint)PropertyID.DrumNodesALL, _drumNodesALL);
            stream.WriteString((uint)PropertyID.EffectsValues, _effectsValues);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.messageSet || entry.setPlayerNumberSet || entry.timerSet || entry.newPlayerConnectedSet || entry.newPlayerUpdateTimeSet || entry.drumNodesSingleSet || entry.drumNodesALLSet || entry.animatorTimeSet || entry.effectsValuesSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.messageSet) {
                stream.WriteString((uint)PropertyID.Message, entry.message);
                didWriteProperties = true;
            }
            if (entry.setPlayerNumberSet) {
                stream.WriteString((uint)PropertyID.SetPlayerNumber, entry.setPlayerNumber);
                didWriteProperties = true;
            }
            if (entry.timerSet) {
                stream.WriteString((uint)PropertyID.Timer, entry.timer);
                didWriteProperties = true;
            }
            if (entry.newPlayerConnectedSet) {
                stream.WriteString((uint)PropertyID.NewPlayerConnected, entry.newPlayerConnected);
                didWriteProperties = true;
            }
            if (entry.newPlayerUpdateTimeSet) {
                stream.WriteString((uint)PropertyID.NewPlayerUpdateTime, entry.newPlayerUpdateTime);
                didWriteProperties = true;
            }
            if (entry.drumNodesSingleSet) {
                stream.WriteString((uint)PropertyID.DrumNodesSingle, entry.drumNodesSingle);
                didWriteProperties = true;
            }
            if (entry.drumNodesALLSet) {
                stream.WriteString((uint)PropertyID.DrumNodesALL, entry.drumNodesALL);
                didWriteProperties = true;
            }
            if (entry.animatorTimeSet) {
                stream.WriteString((uint)PropertyID.AnimatorTime, entry.animatorTime);
                didWriteProperties = true;
            }
            if (entry.effectsValuesSet) {
                stream.WriteString((uint)PropertyID.EffectsValues, entry.effectsValues);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Message: {
                    string previousValue = _message;
                    _message = stream.ReadString();
                    bool messageExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.messageSet);
                    if (!messageExistsInChangeCache && _message != previousValue) {
                        FireMessageDidChange(_message);
                    }
                    break;
                }
                case (uint)PropertyID.SetPlayerNumber: {
                    string previousValue = _setPlayerNumber;
                    _setPlayerNumber = stream.ReadString();
                    bool setPlayerNumberExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.setPlayerNumberSet);
                    if (!setPlayerNumberExistsInChangeCache && _setPlayerNumber != previousValue) {
                        FireSetPlayerNumberDidChange(_setPlayerNumber);
                    }
                    break;
                }
                case (uint)PropertyID.NewPlayerConnected: {
                    string previousValue = _newPlayerConnected;
                    _newPlayerConnected = stream.ReadString();
                    bool newPlayerConnectedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.newPlayerConnectedSet);
                    if (!newPlayerConnectedExistsInChangeCache && _newPlayerConnected != previousValue) {
                        FireNewPlayerConnectedDidChange(_newPlayerConnected);
                    }
                    break;
                }
                case (uint)PropertyID.DrumNodesSingle: {
                    string previousValue = _drumNodesSingle;
                    _drumNodesSingle = stream.ReadString();
                    bool drumNodesSingleExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.drumNodesSingleSet);
                    if (!drumNodesSingleExistsInChangeCache && _drumNodesSingle != previousValue) {
                        FireDrumNodesSingleDidChange(_drumNodesSingle);
                    }
                    break;
                }
                case (uint)PropertyID.DrumNodesALL: {
                    string previousValue = _drumNodesALL;
                    _drumNodesALL = stream.ReadString();
                    bool drumNodesALLExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.drumNodesALLSet);
                    if (!drumNodesALLExistsInChangeCache && _drumNodesALL != previousValue) {
                        FireDrumNodesALLDidChange(_drumNodesALL);
                    }
                    break;
                }
            
                case (uint)PropertyID.EffectsValues: {
                    string previousValue = _effectsValues;
                    _effectsValues = stream.ReadString();
                    bool effectsValuesExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.effectsValuesSet);
                    if (!effectsValuesExistsInChangeCache && _effectsValues != previousValue) {
                        FireEffectsValuesDidChange(_effectsValues);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _message = message;
        _setPlayerNumber = setPlayerNumber;
        _newPlayerConnected = newPlayerConnected;
        _drumNodesSingle = drumNodesSingle;
        _drumNodesALL = drumNodesALL;
        _effectsValues = effectsValues;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
